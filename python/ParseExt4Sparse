#!/usr/bin/env python3

import sys
import struct

magic = 0xed26ff3a
chunk_type_raw = 0xcac1
chunk_type_dont_care = 0xcac3

version = 1
blk_sz = 0
total_chunks = 0

def usage():
    print('usage:')
    print(sys.argv[0] + " inputfile" + " outputfile")

def sparse_header(header):
    global blk_sz, total_chunks
    tuple = struct.unpack('IHHHHIIII', header)
    if tuple[0] == magic and tuple[1] == version:
        blk_sz = tuple[5]
        total_chunks = tuple[7]
        return True
    else:
        return False

def sparse_chunks(header):
    tuple = struct.unpack('HHII', header)
    chunk_len = tuple[2] * blk_sz
    if chunk_type_raw == tuple[0]:
        if tuple[3] == chunk_len + 12:
            output_fd.write(input_fd.read(chunk_len))
    elif chunk_type_dont_care == tuple[0]:
        if tuple[3] == 12:
            output_fd.write(null_fd.read(chunk_len))

if 3 != len(sys.argv):
    usage()

input_fd = open(sys.argv[1], "rb")
output_fd = open(sys.argv[2], "wb")
null_fd = open("/dev/zero", "rb")

if sparse_header(input_fd.read(28)):
    n = 0
    while n < total_chunks:
        sparse_chunks(input_fd.read(12))
        n += 1
else:
    print(sys.argv[1] + " isn't ext4 filesystem")

input_fd.close()
output_fd.close()
null_fd.close()
